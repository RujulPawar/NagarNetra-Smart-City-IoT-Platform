<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Parking System</title>
    <link rel="icon" href="/logo.png" type="image/png">
    <link rel="stylesheet" href="/views/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .parking-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-top: 20px;
        }

        .parking-row {
            display: flex;
            justify-content: center;
            gap: 30px;
        }

        .parking-spot {
            width: 150px;
            height: 200px;
            border: 2px solid #333;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between;
            padding: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .spot-number {
            font-size: 24px;
            font-weight: bold;
        }

        .car-icon {
            font-size: 50px;
            margin: 10px 0;
        }

        .spot-status {
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: bold;
            text-align: center;
            width: 100%;
        }

        .vacant {
            background-color: #4CAF50;
            color: white;
        }

        .occupied {
            background-color: #F44336;
            color: white;
        }

        .stats-container {
            margin-top: 40px;
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .stats-row {
            display: flex;
            justify-content: space-around;
            margin-top: 15px;
        }

        .stat-box {
            text-align: center;
            padding: 15px;
            border-radius: 8px;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            min-width: 150px;
        }

        .stat-title {
            font-size: 14px;
            color: #666;
        }

        .stat-value {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="sidebar-logo">
            <img src="/logo.png" alt="NagarNetra Logo">
            <h1>NagarNetra</h1>
        </div>
        <ul class="sidebar-menu">
            <li><a href="/nagarnetra"><img src="/home.png" alt="Home Icon" class="menu-icon"><span>Home</span></a></li>
            <li><a href="/urbantrafficmanagement"><img src="/traffic.png" alt="Traffic Icon" class="menu-icon"><span>Urban Traffic Management</span></a></li>
            <li><a href="/environmentalmonitoring"><img src="/environment.png" alt="Environment Icon" class="menu-icon"><span>Environmental Monitoring</span></a></li>
            <li><a href="/publicsafety"><img src="/safety.png" alt="Safety Icon" class="menu-icon"><span>Public Safety</span></a></li>
            <li><a href="/maintenance"><img src="/maintenance.png" alt="Maintenance Icon" class="menu-icon"><span>System Maintenance</span></a></li>
        </ul>
    </div>

    <div class="main-content">
        <h1>Smart Parking System</h1>
        <p>Real-time parking spot availability monitoring</p>

        <div class="parking-container">
            <div class="parking-row">
                <div class="parking-spot" id="spot1">
                    <div class="spot-number">Spot 1</div>
                    <i class="fas fa-car car-icon"></i>
                    <div class="spot-status vacant">VACANT</div>
                </div>

                <div class="parking-spot" id="spot2">
                    <div class="spot-number">Spot 2</div>
                    <i class="fas fa-car car-icon"></i>
                    <div class="spot-status vacant">VACANT</div>
                </div>

                <div class="parking-spot" id="spot3">
                    <div class="spot-number">Spot 3</div>
                    <i class="fas fa-car car-icon"></i>
                    <div class="spot-status vacant">VACANT</div>
                </div>
            </div>
        </div>

        <div class="stats-container">
            <h2>Parking Statistics</h2>
            <div class="stats-row">
                <div class="stat-box">
                    <div class="stat-title">Total Spots</div>
                    <div class="stat-value">3</div>
                </div>

                <div class="stat-box">
                    <div class="stat-title">Available</div>
                    <div class="stat-value" id="available-count">3</div>
                </div>

                <div class="stat-box">
                    <div class="stat-title">Occupied</div>
                    <div class="stat-value" id="occupied-count">0</div>
                </div>

                <div class="stat-box">
                    <div class="stat-title">Occupancy Rate</div>
                    <div class="stat-value" id="occupancy-rate">0%</div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.2.7/mqtt.min.js"></script>
    <script>
        // Connect to MQTT broker
        const clientId = 'smartparking_client_' + Math.random().toString(16).substr(2, 8);
        const client = mqtt.connect('ws://localhost:8080', {
            clientId: clientId,
            clean: true
        });

        client.on('connect', function() {
            console.log('Connected to MQTT broker');
            client.subscribe('smart_parking/occupancy');
        });

        client.on('message', function(topic, message) {
            if (topic === 'smart_parking/occupancy') {
                updateParkingStatus(message.toString());
            }
        });

        function updateParkingStatus(data) {
            try {
                const occupancyData = JSON.parse(data);

                // Update each parking spot
                for (let i = 1; i <= 3; i++) {
                    const spotElement = document.getElementById('spot' + i);
                    const statusElement = spotElement.querySelector('.spot-status');
                    const carIcon = spotElement.querySelector('.car-icon');

                    if (occupancyData['spot' + i] === 1) {
                        // Occupied
                        statusElement.className = 'spot-status occupied';
                        statusElement.textContent = 'OCCUPIED';
                        carIcon.style.color = '#F44336';
                    } else {
                        // Vacant
                        statusElement.className = 'spot-status vacant';
                        statusElement.textContent = 'VACANT';
                        carIcon.style.color = '#4CAF50';
                    }
                }

                // Update statistics
                const occupiedCount = Object.values(occupancyData).filter(val => val === 1).length;
                const availableCount = 3 - occupiedCount;
                const occupancyRate = Math.round((occupiedCount / 3) * 100);

                document.getElementById('available-count').textContent = availableCount;
                document.getElementById('occupied-count').textContent = occupiedCount;
                document.getElementById('occupancy-rate').textContent = occupancyRate + '%';

            } catch (error) {
                console.error('Error parsing occupancy data:', error);
            }
        }

        // For testing/demo purposes - simulate occupancy changes
        function simulateOccupancyChanges() {
            setInterval(() => {
                const testData = {
                    spot1: Math.round(Math.random()),
                    spot2: Math.round(Math.random()),
                    spot3: Math.round(Math.random())
                };
                updateParkingStatus(JSON.stringify(testData));
            }, 5000); // Change every 5 seconds
        }

        // Uncomment to test without MQTT
        // simulateOccupancyChanges();
    </script>
</body>
</html>